<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>User Management ; Users</title>

  <link rel="stylesheet" type="text/css" href="/styles/users.css" />
</head>

<body>
  <header>
    <a href="/" title="Nutzer erstellen"><svg aria-hidden="true" focusable="false" data-prefix="fas"
        data-icon="arrow-left" class="svg-inline--fa fa-arrow-left fa-w-14" role="img"
        xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
        <path fill="currentColor"
          d="M257.5 445.1l-22.2 22.2c-9.4 9.4-24.6 9.4-33.9 0L7 273c-9.4-9.4-9.4-24.6 0-33.9L201.4 44.7c9.4-9.4 24.6-9.4 33.9 0l22.2 22.2c9.5 9.5 9.3 25-.4 34.3L136.6 216H424c13.3 0 24 10.7 24 24v32c0 13.3-10.7 24-24 24H136.6l120.5 114.8c9.8 9.3 10 24.8.4 34.3z">
        </path>
      </svg></a>
  </header>
  <article>
    <div class="table">
      <table>
        <tr>
          <th>Standnummer</th>
          <th>Kundenname</th>
          <th>Nutzername</th>
          <th>Passwort</th>
          <th>Profil</th>
          <th>Sessions</th>
          <th></th>
          <th></th>
        </tr>
        {{#each users}}
        <tr>
          <td>{{this.boothId}}</td>
          <td>{{this.customerName}}</td>
          <td>{{this.username}}</td>
          <td class="password">{{this.password}}</td>
          <td>{{this.profile}}</td>
          <td class="sessions" id="sessions-{{this.username}}">{{this.sessions}}</td>
          <td><svg onclick="kickUsers('{{this.username}}')" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="crosshairs" class="svg-inline--fa fa-crosshairs fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M500 224h-30.364C455.724 130.325 381.675 56.276 288 42.364V12c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v30.364C130.325 56.276 56.276 130.325 42.364 224H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h30.364C56.276 381.675 130.325 455.724 224 469.636V500c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-30.364C381.675 455.724 455.724 381.675 469.636 288H500c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12zM288 404.634V364c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40.634C165.826 392.232 119.783 346.243 107.366 288H148c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-40.634C119.768 165.826 165.757 119.783 224 107.366V148c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40.634C346.174 119.768 392.217 165.757 404.634 224H364c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40.634C392.232 346.174 346.243 392.217 288 404.634zM288 256c0 17.673-14.327 32-32 32s-32-14.327-32-32c0-17.673 14.327-32 32-32s32 14.327 32 32z"></path></svg></td>
          <td><svg onclick="printUser('{{this.username}}', '{{this.password}}')" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="print" class="svg-inline--fa fa-print fa-w-16" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><title>Erneut ausdrucken?</title><path fill="currentColor" d="M448 192V77.25c0-8.49-3.37-16.62-9.37-22.63L393.37 9.37c-6-6-14.14-9.37-22.63-9.37H96C78.33 0 64 14.33 64 32v160c-35.35 0-64 28.65-64 64v112c0 8.84 7.16 16 16 16h48v96c0 17.67 14.33 32 32 32h320c17.67 0 32-14.33 32-32v-96h48c8.84 0 16-7.16 16-16V256c0-35.35-28.65-64-64-64zm-64 256H128v-96h256v96zm0-224H128V64h192v48c0 8.84 7.16 16 16 16h48v96zm48 72c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"></path></svg></td>
        </tr>
        {{/each}}
      </table>
    </div>
    <div class="stats">
      <div>
        <canvas id="user-stats"></canvas>
      </div>
      <div id="pings">
      </div>
    </div>
  </article>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="/scripts/epos-2.12.0.js"></script>
  <script src="/scripts/printer.js"></script>
  <script src="/scripts/users.js"></script>
  <script>
    let users = [{{#each users}} "{{this.username}}", {{/each}}];
    window.onload = () => {
      window.setInterval(() => {
        users.forEach(async u => {
          let target = document.getElementById(`sessions-${u}`);
          let cuSess = +target.innerHTML;
          let nwSess = await getSessions(u);
          target.innerHTML = nwSess;
          if (nwSess > cuSess) {
            target.style.color = '#39bc00';
            target.style.fontWeight = 'bold';
          } else if (nwSess < cuSess) {
            target.style.color = '#bc1f00';
            target.style.fontWeight = 'bold';
          } else {
            target.style.color = 'inherit';
            target.style.fontWeight = 'normal';
          }
        });
      }, 3000);

      let z = n => n < 9 ? `0${n}` : n;
      let cuTime = new Date();
      let config = {
                      type: 'line',
                      data: {
                        labels: [],
                        datasets: [{
                          label: 'Users',
                          backgroundColor: '#ab70b4',
                          borderColor: '#ab70b4',
                          data: [],
                          fill: true,
                        },],
                      },
                      options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                          duration: 0,
                        },
                        scales: {
                          x: {
                            ticks: {
                              callback: (value, index, values) => {
                                let d = new Date(cuTime-(values.length-index)*30*1000);
                                return `${z(d.getHours())}:${z(d.getMinutes())}`;
                              },
                            },
                          },
                          y: {
                            display: true,
                            ticks: {
                              min: 0,
                              stepSize: 1,
                              suggestedMin: 0,
                            }
                          },
                        },
                      },
                    };
      let chart = new Chart(document.getElementById('user-stats'), config);

      function updateUsers() {
        fetch(`/api/user-stats`)
        .then(res => res.json())
        .then(res => {
          cuTime = new Date();
          chart.destroy();
          config.data.labels = [...new Array(res.length).keys(),];
          config.data.datasets[0].data = res;
          chart = new Chart(document.getElementById('user-stats'), config);
        });
      }
      window.setInterval(updateUsers, 1000*30);
      updateUsers();

      function updatePings() {
        doPings().then(hosts => {
          const target = document.getElementById('pings');
          target.innerHTML = '';
          hosts.forEach(h => {
            const div = document.createElement('div');
            div.classList.add('host-ping');
            div.innerHTML = `
<b>${h.name}</b>
<i>${h.ip}</i>
            `;
            div.classList.add(h.alive ? 'alive' : 'dead');
            target.appendChild(div);
          });
        }).catch(e => console.log(e));
      }
      window.setInterval(updatePings, 1000);
      updatePings();
    };
  </script>
</body>

</html>